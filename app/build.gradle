import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 22
        buildToolsVersion "22.0.1"

        defaultConfig {
            applicationId = 'com.gst_sdk_tutorials.tutorial_3'
            minSdkVersion.apiLevel = 14
            targetSdkVersion.apiLevel = 22
        }

        sources.main {
            jni {
                source {
                    srcDirs = ['src/main/none']
                }
            }

            jniLibs {
                source {
                    srcDirs = ['src/main/libs']
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }
        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            create("arm") {
                ndk.abiFilters.add("armeabi")
            }
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
            create("arm8") {
                ndk.abiFilters.add("arm64-v8a")
            }
            create("x86") {
                ndk.abiFilters.add("x86")
            }
            create("x86-64") {
                ndk.abiFilters.add("x86_64")
            }
            create("mips") {
                ndk.abiFilters.add("mips")
            }
            create("mips-64") {
                ndk.abiFilters.add("mips64")
            }
            // To include all cpu architectures, leaves abiFilters empty
            create("all")
        }
    }

}

dependencies {
    //compile 'com.android.support:appcompat-v7:18.0.+'

    //compile 'com.android.support:appcompat-v7:22.2.1'

    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'
    //compile 'com.android.support:design:+'
    //compile 'com.android.support:support-annotations:+'
    compile 'com.android.support:support-annotations:22.0.0'
    compile 'com.android.volley:volley:1.0.0'
    compile 'com.google.android.gms:play-services-appindexing:8.1.0'
}

// call regular ndk-build(.cmd) script from app directory
task ndkBuild(type: Exec) {

    // get NDK directory
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine ndkDir + '/ndk-build.cmd', '-C', file('src/main').absolutePath
    } else {
        commandLine ndkDir + '/ndk-build', 'V=1', '-C', file('src/main').absolutePath
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(new File(buildDir, 'libs')) { include '**/*.so' }
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkLibsToJar
}
